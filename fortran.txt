00001 statement area
C comment line
     1 Any character is continuation line

  A line beginning with 'c' or 'C' is a comment line and will be ignored
by the compiler

Dlabl statement
  A line beginning with 'd' or 'D' is a debug line and will only be compiled
if the -d command line switch is specified

      PROGRAM name

      INTEGER var,var,...
      LOGICAL var,var,...
      REAL var,var,...
      BYTE var,var,...
      SHORT var,var,...
      DIMENSION var(size,size,...),...
      COMMON /name/var,var,.../name/var,var,var...
      DATA var,var,var/data,data,data/var,var,.../data,data,...

      var = expr
      ASSIGN line TO var
      CALL OUT(port,value)
      CALL POKE(address,value)
      DO line var=start,end[,step]
      FORMAT(spec,spec,...)
      IF (expr) less,equal,greater
      IF (expr) statement
      GO TO line
      GO TO (line,line,line,...),var
      GO TO var
      GO TO var,(line,line,...)
      WRITE(lun[,fline][,ERR=line][,END=line])var,var,...
      WRITE(lun,*)var,var,...
      WRITE(*,*)var,var,...
      READ(lun[,fline][,ERR=line][,END=line])var,var,...
      READ(lun,*)var,var,...
      READ(*,*)var,var,...
      CONTINUE
      PAUSE [c]
      STOP [c]
      END
      ASM
      CALL OPEN(lun,filename,reclen)
      REWIND lun
      ENDFILE lun
      CALL subr
      RETURN                (For no-arg subroutines)
      

Expression operators:
      +
      -
      *
      /
      &
      |
      ^
      =
      <>
      <
      >
      <=
      >=
      .AND.
      .OR.
      .XOR.
      .EQ.
      .NE.
      .LT.
      .GT.
      .LE.
      .GE.
      ABS(n)
      ACOS(n)
      ASIN(n)
      ATAN(n)
      COS(n)
      EXP(n)
      FLG(n)
      FLOAT(n)
      INP(n)
      INT(n)
      LN(n)
      PEEK(n)
      RND(n)
      SGN(n)
      SIN(n)
      SQRT(n)
      TAN(n)
      IOFLAG(lun)    (expression)
      IOSTATUS(lun)  (expression)

Format specifiers for output:
      [n]A[width]
      [n]F[width][.decimal]
      [n]I[width]
      [n]L[width]
      [n]X
      'string'

Format specifiers for input:
      [n]F[width][.decimal]
      [n]I[width]
      [n]X
      [n]L[width]

LUN assignments:
  1 - First disk file
  2 - Second disk file
  3 - Third disk file
  4 - Fourth disk file
  5 - Terminal without carriage control
  6 - Terminal with carriage control


Still to implement:
      EQUIVALENCE (var,var,...),(var,var,...),...


      CALL subr[(arg,arg,...)]
      CALL APPEND(lun,filename,reclen)
      READ(lun[,REC=index],fline,ERR=line,END=line)var,var,...
      WRITE(lun[,REC=index],fline,ERR=line,END=line)var,var,...
      READ(lun[,REC=index],ERR=line,END=line)var,var,...
      WRITE(lun[,REC=index],ERR=line,END=line)var,var,...

      fnmame(arg,arg,...) = expr
      [type] FUNCTION name(arg,arg,...)
      SUBROUTINE name[(arg,arg,...)]
      EXTERNAL
      BLOCK DATA

Compiler Directives:
.1805           - Enable 1804/5/6 assembler mode
.32             - Enable 32-bit mode (on by default)
.binary         - Output file as binary
.fp             - Enable floating-point mode (on by default)
.elfos          - Produce Elf/OS executable
.list           - Show source list
.nolist         - Turn off source list
.noruntime      - Do not show runtime modules
.nosymbols      - Do not show assembler symbols
.novars         - Do not show variables
.options        - Show options in effect
.runtime        - Show runtime modules
.symbols        - Show assembler symbols
.vars           - Show variables

Switches:
-32             - compile in 32-bit mode (on by default)
-fp             - enable floating point (on by default)
-a              - produce assembly file
-A              - display assembly
-b              - output as binary
-c              - show compiler output
-d              - Compile lines beginning with D
-i              - output as Intel hex
-l              - show source list
-L              - create .lst file
-o              - show options in effect
-r              - output as RCS hex
-R              - show runtime modules
-s              - show assembler symbols
-v              - show variables
-lf             - set line endings to line-feed
-cr             - set line endings to carriag-return
-lfcr           - set line endings to line-feed/carriage-return
-crlf           - set line endings to carriage-return/line-feed
-nq             - normal Q for internal serial port
-rq             - reverse Q for internal serial port
-ef?            - Set EF line for internal serial port (?=1-4)
-ref?           - Set reverse EF line for internal serial port (?=1-4)
-ram=start-end  - set ram address range
-rom=start-end  - set rom address range
-start=hex      - Set start address
-exit=hex       - Set address to jump to on exit
-vars=hex       - Start of variable table
-stack=hex      - set address for top of stack
-estack=hex     - set address for top of expression stack
-heap=hex       - set address for top of heap
-keybuf=hex     - size of key buffer
-term=bios      - use BIOS terminal i/o (default)
     =self      - use internal serial i/o
     =none      - no terminal
-elfos          - produce an Elf/OS executable
-stg            - produce STG compatible image (sets -exit=8003)
-melf           - -ram=0000-7fff -rom=8000-ffff -nq -ef2
-pev            - -ram=0000-7fff -rom=8000-ffff -nq -ef2
-pev2           - -ram=0000-7fff -rom=8000-ffff -rq -ref2
-elf2k          - -ram=0000-7fff -rom=8000-ffff -nq -ef3
-mclo           - -ram=0000-7fff -rom=8000-ffff -nq -ef3
-mchi           - -ram=8000-ffff -rom=0000-7fff -nq -ef3
-mchip          - -ram=8000-ffff -rom=0000-7fff -rq -ref3

runtime errors:
  0x20 - File not open
  0x21 - File already open
  0x22 - Invalid format encountered
